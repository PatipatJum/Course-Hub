generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                  @id @default(autoincrement())
  email           String               @unique
  name            String
  password        String?
  image           String?            
  reviews         Review[]
  favoriteReviews UserFavoriteReview[]
  emailVerified   DateTime?
  accounts        Account[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())
}

model Course {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Review {
  id              Int                  @id @default(autoincrement())
  rating          Int
  comment         String
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  course          Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        Int
  favoriteReviews UserFavoriteReview[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())
}

model UserFavoriteReview {
  userId    Int
  reviewId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, reviewId]) // Composite primary key
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
